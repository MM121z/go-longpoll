{
  "name": "longpoll",
  "tagline": "PubSub queuing with long-polling subscribers (not bound to HTTP)",
  "body": "\r\n[![Build status][buildimage]][travis] [![Coverage][codecovimage]][codecov] [![GoReportCard][goreportcardimage]][goreportcard] [![API documentation][godocimage]][docs]\r\n\r\n# PubSub with long polling in Go\r\n\r\nThe [Go][go] library `go-longpoll` (package `longpoll`) provides an implementation of the\r\nlong-polling mechanism of the [PubSub][pubsub] pattern. Although the primary purpose of the\r\nlibrary is to aid the development of web applications, the library provides no specific web\r\nhandlers and  can be used in other distributed applications.\r\n\r\nLong polling is a technique to notify client applications about updates on the server. It is often\r\nused in writing web application as a substitute for the push technique, however can be used in\r\nother distributed applications.\r\n\r\nClients initiate subscriptions to the server specifying topics they are interested in. Given a\r\nsubscription Id a client makes a request for new data. The request is held open until data becomes\r\navailable on the server (published to a matching topic). As soon as this happens the request is\r\nanswered immediately. If no data arrives over a predefined time window (the long-polling interval)\r\nthe request returns empty. A new connection is then established between the client and the server\r\nto receive further updates.\r\n\r\nThe following points are often listed as the benefits of long-polling over the push mechanism in web\r\napplications:\r\n\r\n* does not require a persistent connection to the server\r\n* works for slow clients as they receive information at the speed they can process, although\r\nmaybe in large chunks which are accumulated at the server between requests\r\n* friendly to proxies blocking streaming\r\n\r\nThe library can be installed by one of the following methods:\r\n\r\n* using `go get`\r\n\r\n\t```\r\n\tgo get github.com/ventu-io/go-longpoll\r\n\t```\r\n\r\n* via cloning this repository:\r\n\r\n\t```\r\n\tgit clone git@github.com:ventu-io/go-longpoll.git ${GOPATH}/src/github.com/ventu-io/go-longpoll\r\n\t```\r\n\r\n## Implementation details and examples\r\n\r\nThe API documentation is available at [GoDocs][docs]. The following demo [repository][demo]\r\nprovides multiple examples and benchmarks for this library.\r\n\r\nSubscriptions will timeout and get closed if no client request is received over a given timeout\r\ninterval. Every request resets the timeout counter. The timeout interval is a property of the\r\nsubscription itself and different subscriptions may have different timeout intervals.\r\n\r\nThe long-polling interval, within which the request is held, is specified per request. Web\r\napplication wrappers might provide defaults.\r\n\r\nThe library supports concurrent long-polling requests on the same subscription Id, but no data will\r\nbe duplicated across request responses. No specific distribution of data across responses is\r\nguaranteed: new requests signal the existing one to return immediately.\r\n\r\nAt the moment the library does not support persisting of published data before it is collected by\r\nsubscribers. All the published data is stored in memory of the backend.\r\n\r\n\r\n**Long-polling with subscription management:**\r\n\r\nHandling of long-polling subscriptions, publishing and receiving data is done by the\r\n`longpoll.LongPoll` type:\r\n\r\n```go\r\nps := longpoll.New()\r\nid1, _ := ps.Subscribe(time.Minute, \"TopicA\", \"TopicB\")\r\nid2, _ := ps.Subscribe(time.Minute, \"TopicB\", \"TopicC\")\r\n\r\ngo func() {\r\n\tfor {\r\n\t\tif datach, err := ps.Get(id1, 30*time.Second); err == nil {\r\n\t\t\tfmt.Printf(\"%v received %v\", id1, <-datach)\r\n\t\t} else {\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n}()\r\n\r\ngo func() {\r\n\tfor {\r\n\t\tif datach, err := ps.Get(id2, 20*time.Second); err == nil {\r\n\t\t\tfmt.Printf(\"%v received %v\", id2, <-datach)\r\n\t\t} else {\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n}()\r\n\r\nfor {\r\n\t// data published on TopicB will be received by id1 and id2, TopicC by id2 only\r\n\tps.Publish({\"random\": rand.Float64()}, \"TopicB\", \"TopicC\")\r\n\r\n\t// sleep for up to 50s\r\n\ttime.Sleep(time.Duration(rand.Intn(5e10)))\r\n}\r\n```\r\nA comprehensive example can be run from the demo [repository][demo] via\r\n\r\n    ./longpoll 1\r\n\r\n**Long-polling on a single subscription channel:**\r\n\r\nHandling of the single-channel long-polling pubsub is done by the `longpoll.Sub` type:\r\n\r\n```go\r\nch := longpoll.MustNewChannel(time.Minute, func (id string) {\r\n\t// action on exit\r\n}, \"TopicA\", \"TopicB\")\r\n\r\ngo func() {\r\n\tfor {\r\n\t\tif datach, err := ch.Get(20*time.Second); err == nil {\r\n\t\t\tfmt.Printf(\"received %v\", <-datach)\r\n\t\t} else {\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n}()\r\n\r\nfor {\r\n\tch.Publish({\"random\": rand.Float64()}, \"TopicB\")\r\n\t// above subscription will not receive this data\r\n\tch.Publish({\"random\": rand.Float64()}, \"TopicC\")\r\n\r\n\t// sleep for up to 50s\r\n\ttime.Sleep(time.Duration(rand.Intn(5e10)))\r\n}\r\n```\r\nA comprehensive example can be run from the demo [repository][demo] via\r\n\r\n    ./longpoll 2\r\n\r\n## Performance\r\n\r\nUsing a benchmark from the demo [repository][demo] a throughput test can be run using the\r\ncommand below.\r\n\r\nMeasured on conventional hardware using a benchmark in the demo [repository][demo], the\r\nimplemented algorithm publisheds and concurrently receives 1 million units of data on average over\r\n880ms:\r\n\r\n    ./longpoll 4\r\n\r\n## Changelog\r\n\r\n#### current master\r\n\r\n* Switched to https://github.com/ventu-io/slf (structured logging facade)\r\n  for logging (no logging output until an SLF configuration is applied by \r\n  an application using the library).\r\n* Incoming get will terminate any pending one for the same subscription \r\n  immediately (if issued concurrently).\r\n* Using https://github.com/ventu-io/go-shortid instead of UUID.v4.\r\n\r\n#### 31 Dec 2015: Version 1.0\r\n\r\n* [First release](https://github.com/ventu-io/go-longpoll/releases/tag/v1.0) of the API\r\n\r\n## License\r\n\r\nCopyright (c) 2015-2016 Ventu.io, Oleg Sklyar, contributors.\r\n\r\nDistributed under a MIT style license found in the [LICENSE][license] file.\r\n\r\n[go]: https://golang.org\r\n[godocimage]: http://img.shields.io/badge/godoc-reference-blue.svg?style=flat\r\n[buildimage]: https://travis-ci.org/ventu-io/go-longpoll.svg?branch=master\r\n[travis]: https://travis-ci.org/ventu-io/go-longpoll\r\n[pubsub]: https://en.wikipedia.org/wiki/Publishâ€“subscribe_pattern\r\n[docs]: https://godoc.org/github.com/ventu-io/go-longpoll\r\n[license]: https://github.com/ventu-io/go-longpoll/blob/master/LICENSE\r\n\r\n[codecovimage]: https://codecov.io/github/ventu-io/go-longpoll/coverage.svg?branch=master\r\n[codecov]: https://codecov.io/github/ventu-io/go-longpoll?branch=master\r\n\r\n[demo]:    https://github.com/go-examples/longpoll\r\n\r\n[goreportcard]: http://goreportcard.com/report/ventu-io/go-longpoll\r\n[goreportcardimage]: https://img.shields.io/badge/goreportcard-A%2B-brightgreen.svg\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}